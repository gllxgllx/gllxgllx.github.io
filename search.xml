<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译原理课程设计（四）</title>
      <link href="/2024/03/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2024/03/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理课程设计（四）"><a href="#编译原理课程设计（四）" class="headerlink" title=" 编译原理课程设计（四）"></a><center> <strong>编译原理课程设计（四）</strong></h1><p>以下是全流程步骤：</p><h2 id="1-创建项目目录："><a href="#1-创建项目目录：" class="headerlink" title="1. 创建项目目录："></a>1. <strong>创建项目目录：</strong></h2><p>   在你选择的位置创建一个新目录，例如 <code>SimpleCompiler</code>。</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> SimpleCompiler</span><br><span class="line"><span class="built_in">cd</span> SimpleCompiler</span><br></pre></td></tr></table></figure><h2 id="2-创建-Lex-文件："><a href="#2-创建-Lex-文件：" class="headerlink" title="2. 创建 Lex 文件："></a>2. <strong>创建 Lex 文件：</strong></h2><p>   在项目目录中创建 <code>lex.l</code> 文件，将下面的内容复制到文件中。</p>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &quot;main.h&quot;</span><br><span class="line">#include &quot;yacc.tab.h&quot;</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">    int yylval;</span><br><span class="line">&#125;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">[ \t\n]     ; // Skip whitespace</span><br><span class="line">[a-zA-Z][a-zA-Z0-9]*   &#123;</span><br><span class="line">                          yylval = strdup(yytext);</span><br><span class="line">                          return IDENTIFIER;</span><br><span class="line">                      &#125;</span><br><span class="line">:=          return ASSIGN;</span><br><span class="line">[0-9]+      &#123;</span><br><span class="line">                          yylval = atoi(yytext);</span><br><span class="line">                          return INTEGER;</span><br><span class="line">                      &#125;</span><br><span class="line">\;          return SEMICOLON;</span><br><span class="line">\.          return PERIOD;</span><br><span class="line">.           ;</span><br><span class="line">%%</span><br></pre></td></tr></table></figure><h2 id="3-创建-Yacc-文件："><a href="#3-创建-Yacc-文件：" class="headerlink" title="3. 创建 Yacc 文件："></a>3. <strong>创建 Yacc 文件：</strong></h2><p>   在项目目录中创建 <code>yacc.y</code> 文件，将下面的内容复制到文件中。</p>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &quot;main.h&quot;</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">    int yylex();</span><br><span class="line">    void yyerror(const char* s);</span><br><span class="line">&#125;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%union &#123;</span><br><span class="line">    int intval;</span><br><span class="line">    char* strval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%token &lt;intval&gt; INTEGER</span><br><span class="line">%token &lt;strval&gt; IDENTIFIER</span><br><span class="line">%token ASSIGN SEMICOLON PERIOD</span><br><span class="line"></span><br><span class="line">%start program</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">program: block PERIOD &#123;</span><br><span class="line">    printf(&quot;Compilation successful!\n&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">block: BEGIN statement_list END &#123;</span><br><span class="line">    printf(&quot;Executing program...\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">statement_list: statement &#123;</span><br><span class="line">    printf(&quot;Statement executed\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">| statement_list SEMICOLON statement &#123;</span><br><span class="line">    printf(&quot;Statement executed\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">statement: assignment &#123;</span><br><span class="line">    printf(&quot;Assignment statement\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assignment: IDENTIFIER ASSIGN expression &#123;</span><br><span class="line">    printf(&quot;Assigning value to %s\n&quot;, $1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expression: INTEGER &#123;</span><br><span class="line">    $$ = $1;</span><br><span class="line">&#125;</span><br><span class="line">| IDENTIFIER &#123;</span><br><span class="line">    $$ = lookup_variable($1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">void yyerror(const char* s) &#123;</span><br><span class="line">    fprintf(stderr, &quot;Error: %s\n&quot;, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int lookup_variable(const char* var) &#123;</span><br><span class="line">    // Dummy implementation for variable lookup</span><br><span class="line">    printf(&quot;Looking up variable %s\n&quot;, var);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;Simple Pascal Compiler\n&quot;);</span><br><span class="line">    yyparse();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-创建主文件："><a href="#4-创建主文件：" class="headerlink" title="4. 创建主文件："></a>4. <strong>创建主文件：</strong></h2><p>   在项目目录中创建 <code>main.cpp</code> 文件，将下面的内容复制到文件中。</p>   <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">yylex</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">yyparse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Simple Pascal Compiler\n&quot;</span>);</span><br><span class="line">    <span class="built_in">yyparse</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-创建头文件："><a href="#5-创建头文件：" class="headerlink" title="5. 创建头文件："></a>5. <strong>创建头文件：</strong></h2><p>   在项目目录中创建 <code>main.h</code> 文件，将下面的内容复制到文件中。</p>   <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAIN_HPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_HPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YYSTYPE Type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Type</span> &#123;</span><br><span class="line">    <span class="type">int</span> intval;</span><br><span class="line">    <span class="type">char</span>* strval;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="6-创建-CMakeLists-txt-文件："><a href="#6-创建-CMakeLists-txt-文件：" class="headerlink" title="6. 创建 CMakeLists.txt 文件："></a>6. <strong>创建 CMakeLists.txt 文件：</strong></h2><p>   在项目目录中创建 <code>CMakeLists.txt</code> 文件，将下面的内容复制到文件中。</p>   <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(SimpleCompiler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find Flex and Bison</span></span><br><span class="line"><span class="keyword">find_package</span>(FLEX REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(BISON REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate Lex and Yacc files</span></span><br><span class="line">FLEX_TARGET(MyScanner lex.l <span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>/lex.yy.c)</span><br><span class="line">BISON_TARGET(MyParser yacc.y <span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>/y.tab.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add Flex and Bison output files to the project</span></span><br><span class="line">ADD_FLEX_BISON_DEPENDENCY(MyScanner MyParser)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Include directories</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(simple_compiler main.cpp <span class="variable">$&#123;FLEX_MyScanner_OUTPUTS&#125;</span> <span class="variable">$&#123;BISON_MyParser_OUTPUTS&#125;</span>)</span><br></pre></td></tr></table></figure><h2 id="7-构建项目："><a href="#7-构建项目：" class="headerlink" title="7. 构建项目："></a>7. <strong>构建项目：</strong></h2><p>   打开终端，进入项目目录，然后运行以下命令构建项目。</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>   这将在 <code>build</code> 文件夹中生成一个名为 <code>simple_compiler</code> 的可执行文件。</p><h2 id="8-运行编译器："><a href="#8-运行编译器：" class="headerlink" title="8. 运行编译器："></a>8. <strong>运行编译器：</strong></h2><p>   在终端中，你可以使用以下命令运行生成的编译器，并将 Pascal 代码作为输入。</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./simple_compiler</span><br></pre></td></tr></table></figure><p>   编译器会提示 “Simple Pascal Compiler”，然后等待输入。你可以输入Pascal代码并按Ctrl+D结束输入。</p><p>请注意，由于我们的示例编译器没有实际的代码生成，它只输出一些信息以演示流程。在实际编译器中，你需要更多的规则来覆盖Pascal语言的其他方面，并生成实际的目标代码。</p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程设计 </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理课程设计（三）</title>
      <link href="/2024/03/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/03/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理课程设计（三）"><a href="#编译原理课程设计（三）" class="headerlink" title=" 编译原理课程设计（三）"></a><center> <strong>编译原理课程设计（三）</strong></h1><h2 id="运行这个简易的编译器需要一些步骤。以下是基本的流程："><a href="#运行这个简易的编译器需要一些步骤。以下是基本的流程：" class="headerlink" title="运行这个简易的编译器需要一些步骤。以下是基本的流程："></a>运行这个简易的编译器需要一些步骤。以下是基本的流程：</h2><h3 id="1-安装-Flex-和-Bison："><a href="#1-安装-Flex-和-Bison：" class="headerlink" title="1. 安装 Flex 和 Bison："></a>1. <strong>安装 Flex 和 Bison：</strong></h3><p>   你需要确保系统上安装了 Flex 和 Bison。它们是用于生成词法分析器和语法分析器的工具。你可以通过包管理器安装它们，例如在 Ubuntu 上使用以下命令：</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install flex bison</span><br></pre></td></tr></table></figure><p>   对于其他系统，请使用相应的包管理器进行安装。</p><h3 id="2-编译-Lex-和-Yacc-文件："><a href="#2-编译-Lex-和-Yacc-文件：" class="headerlink" title="2. 编译 Lex 和 Yacc 文件："></a>2. <strong>编译 Lex 和 Yacc 文件：</strong></h3><p>   打开终端，进入包含 <code>lex.l</code> 和 <code>yacc.y</code> 文件的目录，然后运行以下命令编译它们：</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flex lex.l</span><br><span class="line">bison -dy yacc.y</span><br></pre></td></tr></table></figure><p>   这将生成 <code>lex.yy.c</code> 和 <code>y.tab.c</code> 文件。</p><h3 id="3-编译和链接："><a href="#3-编译和链接：" class="headerlink" title="3. 编译和链接："></a>3. <strong>编译和链接：</strong></h3><p>   继续在终端中运行以下命令编译和链接程序：</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -o simple_compiler lex.yy.c y.tab.c main.cpp</span><br></pre></td></tr></table></figure><p>   这将生成可执行文件 <code>simple_compiler</code>。</p><h3 id="4-运行程序："><a href="#4-运行程序：" class="headerlink" title="4. 运行程序："></a>4. <strong>运行程序：</strong></h3><p>   运行生成的编译器，并将 Pascal 代码作为输入：</p>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./simple_compiler &lt; input.pas</span><br></pre></td></tr></table></figure><p>   其中 <code>input.pas</code> 是包含 Pascal 代码的文件。在这个示例中，你可以使用提供的简单 Pascal 代码。</p><p>请注意，这个简易的编译器只是演示流程的一部分，实际编译器需要更复杂的处理，包括错误处理、代码生成等。此外，由于我们的示例不生成实际的目标代码，程序输出的信息主要用于演示流程和调试目的。</p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程设计 </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理课程设计（二）</title>
      <link href="/2024/03/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/03/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理课程设计（二）"><a href="#编译原理课程设计（二）" class="headerlink" title=" 编译原理课程设计（二）"></a><center> <strong>编译原理课程设计（二）</strong></h1><p>以下是一个简单的示例，以演示整个流程。我们将创建一个支持如下形式的Pascal代码：</p><figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">program</span> SimpleCompiler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  a, b: integer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  a := <span class="number">5</span>;</span><br><span class="line">  b := <span class="number">10</span>;</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>这个Pascal代码定义了两个整数变量 <code>a</code> 和 <code>b</code>，并给它们分别赋值为 5 和 10。</p><p>让我们从头开始，首先是 <code>lex.l</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &quot;main.h&quot;</span><br><span class="line">#include &quot;yacc.tab.h&quot;</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">    int yylval;</span><br><span class="line">&#125;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%option noyywrap</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">[ \t\n]     ; // Skip whitespace</span><br><span class="line">[a-zA-Z][a-zA-Z0-9]*   &#123;</span><br><span class="line">                          yylval = strdup(yytext);</span><br><span class="line">                          return IDENTIFIER;</span><br><span class="line">                      &#125;</span><br><span class="line">:=          return ASSIGN;</span><br><span class="line">[0-9]+      &#123;</span><br><span class="line">                          yylval = atoi(yytext);</span><br><span class="line">                          return INTEGER;</span><br><span class="line">                      &#125;</span><br><span class="line">\;          return SEMICOLON;</span><br><span class="line">\.          return PERIOD;</span><br><span class="line">.           ;</span><br><span class="line">%%</span><br></pre></td></tr></table></figure><p>在这个简单的 <code>lex.l</code> 文件中，我们定义了标识符、赋值符号 <code>:=</code>、整数、分号 <code>;</code>、句点 <code>.</code> 等的词法规则。这里使用了一些简化，比如忽略了空白和换行符。</p><p>接下来是 <code>yacc.y</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &quot;main.h&quot;</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">    int yylex();</span><br><span class="line">    void yyerror(const char* s);</span><br><span class="line">&#125;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%union &#123;</span><br><span class="line">    int intval;</span><br><span class="line">    char* strval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%token &lt;intval&gt; INTEGER</span><br><span class="line">%token &lt;strval&gt; IDENTIFIER</span><br><span class="line">%token ASSIGN SEMICOLON PERIOD</span><br><span class="line"></span><br><span class="line">%start program</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">program: block PERIOD &#123;</span><br><span class="line">    printf(&quot;Compilation successful!\n&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">block: BEGIN statement_list END &#123;</span><br><span class="line">    printf(&quot;Executing program...\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">statement_list: statement &#123;</span><br><span class="line">    printf(&quot;Statement executed\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">| statement_list SEMICOLON statement &#123;</span><br><span class="line">    printf(&quot;Statement executed\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">statement: assignment &#123;</span><br><span class="line">    printf(&quot;Assignment statement\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assignment: IDENTIFIER ASSIGN expression &#123;</span><br><span class="line">    printf(&quot;Assigning value to %s\n&quot;, $1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expression: INTEGER &#123;</span><br><span class="line">    $$ = $1;</span><br><span class="line">&#125;</span><br><span class="line">| IDENTIFIER &#123;</span><br><span class="line">    $$ = lookup_variable($1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">void yyerror(const char* s) &#123;</span><br><span class="line">    fprintf(stderr, &quot;Error: %s\n&quot;, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int lookup_variable(const char* var) &#123;</span><br><span class="line">    // Dummy implementation for variable lookup</span><br><span class="line">    printf(&quot;Looking up variable %s\n&quot;, var);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;Simple Pascal Compiler\n&quot;);</span><br><span class="line">    yyparse();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个简单的 <code>yacc.y</code> 文件定义了一个非常基本的语法，其中包含程序、块、语句列表、语句和赋值语句等。为了简化，这个编译器不执行实际的代码生成，而是输出一些信息表示语法分析和语义分析的阶段。实际的编译器需要更复杂的处理和数据结构来生成目标代码。</p><p>在这个示例中，我们使用了一个虚构的 <code>lookup_variable</code> 函数来模拟变量查找。在实际编译器中，这将是符号表的一部分，并用于跟踪和查找变量。</p><p>这个简单的编译器仅演示了Pascal语法的一小部分，且没有进行实际的代码生成。在实际的编译器中，将需要更多的规则来覆盖Pascal语言的其他方面，以及生成实际的目标代码。</p><p>可以按照这个基础示例继续扩展编译器，以处理更多的Pascal语法和语义规则。</p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程设计 </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理课程设计（一）</title>
      <link href="/2024/03/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
      <url>/2024/03/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理课程设计（一）"><a href="#编译原理课程设计（一）" class="headerlink" title=" 编译原理课程设计（一）"></a><center> <strong>编译原理课程设计（一）</strong></h1><h2 id="流程大致如下："><a href="#流程大致如下：" class="headerlink" title="流程大致如下："></a><strong>流程大致如下：</strong></h2><h3 id="1-词法分析（Lex）："><a href="#1-词法分析（Lex）：" class="headerlink" title="1. 词法分析（Lex）："></a>1. <strong>词法分析（Lex）：</strong></h3><ul><li>使用Lex工具对Pascal源代码进行词法分析，将源代码转换为记号序列。</li><li>在 <code>lex.l</code> 文件中定义正则表达式规则，匹配Pascal中的标识符、整数、运算符等记号。</li><li>通过 <code>yylval</code> 结构体传递识别出的记号的值，其中 <code>YYSTYPE</code> 被重定义为 <code>struct Type</code>，可以存储多种信息。</li></ul><h3 id="2-语法分析（Yacc）："><a href="#2-语法分析（Yacc）：" class="headerlink" title="2. 语法分析（Yacc）："></a>2. <strong>语法分析（Yacc）：</strong></h3><ul><li>使用Yacc工具对Pascal源代码进行语法分析，构建语法树。</li><li>在 <code>yacc.y</code> 文件中定义语法规则，描述Pascal中的语法结构，同时通过 <code>%token</code> 和 <code>%type</code> 声明记号和非终结符的属性。</li><li>使用动作代码构建抽象语法树，将 <code>$$</code> 和 <code>$1</code> 等符号映射到 <code>YYSTYPE</code> 结构体中的成员，将记号的属性传递给语法树节点。</li></ul><h3 id="3-生成语法树（AST）："><a href="#3-生成语法树（AST）：" class="headerlink" title="3. 生成语法树（AST）："></a>3. <strong>生成语法树（AST）：</strong></h3><ul><li>在 <code>yacc.y</code> 文件中定义产生式和相应的动作代码，以构建抽象语法树。</li><li>语法树的节点类型和属性由 <code>YYSTYPE</code> 结构体中的成员决定，如标识符、整数、运算符等。</li></ul><h3 id="4-代码生成："><a href="#4-代码生成：" class="headerlink" title="4. 代码生成："></a>4. <strong>代码生成：</strong></h3><ul><li>遍历抽象语法树，将每个节点翻译为等效的C语言代码。</li><li>在 <code>yacc.y</code> 文件中定义语法规则时，通过动作代码将翻译后的C代码输出或执行。</li><li>对于不同的语法结构，可能需要生成不同的C代码，考虑Pascal和C之间的差异。</li></ul><h3 id="5-整体流程："><a href="#5-整体流程：" class="headerlink" title="5. 整体流程："></a>5. <strong>整体流程：</strong></h3><ul><li>主函数 (<code>main</code>) 初始化输入文件，调用 <code>yyparse()</code> 开始语法分析过程。</li><li>Lex的 <code>yylex()</code> 函数读取记号序列，Yacc按照语法规则进行分析。</li><li>在分析的过程中，动作代码构建抽象语法树，同时输出或执行相应的C代码。</li><li>在语法分析结束后，得到翻译后的C代码。</li></ul><p>总体来说，该流程涵盖了从Pascal到C的编译器设计的主要步骤，包括词法分析、语法分析、生成抽象语法树以及最终的代码生成。在具体实现时，需要根据Pascal语言的语法和语义规则以及C语言的特性进行详细设计和实现。</p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程设计 </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2024/03/02/test/"/>
      <url>/2024/03/02/test/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo回归测试"><a href="#hexo回归测试" class="headerlink" title=" hexo回归测试"></a><center> hexo回归测试</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>test</p>]]></content>
      
      
      <categories>
          
          <category> 博客设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android studio|关于gridview的使用</title>
      <link href="/2023/03/20/Android-studio-%E5%85%B3%E4%BA%8Egridview%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/20/Android-studio-%E5%85%B3%E4%BA%8Egridview%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-studio-关于gridview的使用"><a href="#Android-studio-关于gridview的使用" class="headerlink" title=" Android studio|关于gridview的使用"></a><center> Android studio|关于gridview的使用</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>当你需要在你的Android应用程序中显示一组类似于网格的数据时，可以使用GridView组件。GridView是一个在Android Studio中预定义的可重复使用组件，可以让你轻松地以网格形式显示数据。   </p><h2 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h2><p>1.在你的XML布局文件中添加GridView组件。</p><p>2.创建一个类来表示每个单元格的数据（例如一个简单的Java类）。</p><p>3.创建一个类来实现Adapter接口并定义如何将数据绑定到单元格视图。</p><p>4.创建一个数据列表，并创建一个Adapter对象，将列表数据与GridView组件绑定。   </p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>下面是一个简单的例子，演示如何在Android Studio中使用GridView：   </p><h3 id="在XML布局文件中添加GridView组件："><a href="#在XML布局文件中添加GridView组件：" class="headerlink" title="在XML布局文件中添加GridView组件："></a>在XML布局文件中添加GridView组件：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;GridView</span><br><span class="line">    android:id=&quot;@+id/grid_view&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:numColumns=&quot;3&quot;</span><br><span class="line">    android:verticalSpacing=&quot;10dp&quot;</span><br><span class="line">    android:horizontalSpacing=&quot;10dp&quot;</span><br><span class="line">    android:stretchMode=&quot;columnWidth&quot;</span><br><span class="line">    android:gravity=&quot;center&quot;</span><br><span class="line">    /&gt;</span><br></pre></td></tr></table></figure><p>这个布局文件定义了一个GridView组件，它将显示3列数据，每个单元格之间有10dp的垂直和水平间距。’android:stretchMode’属性设置为’columnWidth’，这样每个单元格的宽度都会根据列宽度平均分配。</p><h3 id="创建一个类来表示每个单元格的数据，例如一个简单的Java类："><a href="#创建一个类来表示每个单元格的数据，例如一个简单的Java类：" class="headerlink" title="创建一个类来表示每个单元格的数据，例如一个简单的Java类："></a>创建一个类来表示每个单元格的数据，例如一个简单的Java类：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class GridItem &#123;</span><br><span class="line">    private int image;</span><br><span class="line">    private String title;</span><br><span class="line">    </span><br><span class="line">    public GridItem(int image, String title) &#123;</span><br><span class="line">        this.image = image;</span><br><span class="line">        this.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int getImage() &#123;</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public String getTitle() &#123;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类表示每个单元格的数据，包括图像和标题。</p><h3 id="创建一个类来实现Adapter接口并定义如何将数据绑定到单元格视图："><a href="#创建一个类来实现Adapter接口并定义如何将数据绑定到单元格视图：" class="headerlink" title="创建一个类来实现Adapter接口并定义如何将数据绑定到单元格视图："></a>创建一个类来实现Adapter接口并定义如何将数据绑定到单元格视图：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class GridAdapter extends BaseAdapter &#123;</span><br><span class="line">    private Context context;</span><br><span class="line">    private List&lt;GridItem&gt; items;</span><br><span class="line">    </span><br><span class="line">    public GridAdapter(Context context, List&lt;GridItem&gt; items) &#123;</span><br><span class="line">        this.context = context;</span><br><span class="line">        this.items = items;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public int getCount() &#123;</span><br><span class="line">        return items.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Object getItem(int position) &#123;</span><br><span class="line">        return items.get(position);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public long getItemId(int position) &#123;</span><br><span class="line">        return position;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public View getView(int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line">        View view = convertView;</span><br><span class="line">        ViewHolder holder;</span><br><span class="line">        if (view == null) &#123;</span><br><span class="line">            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">            view = inflater.inflate(R.layout.grid_item, parent, false);</span><br><span class="line">            holder = new ViewHolder();</span><br><span class="line">            holder.imageView = (ImageView) view.findViewById(R.id.image);</span><br><span class="line">            holder.titleView = (TextView) view.findViewById(R.id.title);</span><br><span class="line">            view.setTag(holder);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            holder = (ViewHolder) view.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        GridItem item = items.get(position);</span><br><span class="line">        holder.imageView.setImageResource(item.getImage());</span><br><span class="line">        holder.titleView.setText(item.getTitle());</span><br><span class="line">        return view;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -安卓开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用|新建文章</title>
      <link href="/2023/03/20/hexo%E4%BD%BF%E7%94%A8-%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/"/>
      <url>/2023/03/20/hexo%E4%BD%BF%E7%94%A8-%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo使用-新建文章"><a href="#hexo使用-新建文章" class="headerlink" title=" hexo使用|新建文章"></a><center> hexo使用|新建文章</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>1.新建文章很简单，一条命令即可。命令如下，执行命令成功会返回一个路径，就是文章的所在路径，删除文章也只要删除对应的文章文件即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new 文章文件名</span><br></pre></td></tr></table></figure><p>2.新建草稿命令如下，草稿不会在博客上显示。在执行时加上 –draft 参数，或是把草稿中render_drafts参数设为true来预览草稿。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new draft 草稿文件名</span><br></pre></td></tr></table></figure><p>3.新建导航选项页界面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page 导航选项页文件名</span><br></pre></td></tr></table></figure><h2 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h2><p>草稿是不会显示到博客上面的，有两张方法发布草稿为正式文章</p><p>1、通过命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo publish 文章文件名</span><br></pre></td></tr></table></figure><p>2.通过移动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">手动将“_drafts”目录下的草稿移动到“_posts”目录下即可发布草稿为正式文章。</span><br></pre></td></tr></table></figure><h2 id="添加分类和标签"><a href="#添加分类和标签" class="headerlink" title="添加分类和标签"></a>添加分类和标签</h2><p>文章分类和标签在文章中添加，文章的参数列表如下：</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">layout</td><td align="center">布局</td><td align="center"></td></tr><tr><td align="center">title</td><td align="center">标题</td><td align="center">文章的文件名</td></tr><tr><td align="center">date</td><td align="center">建立日期</td><td align="center">文章建立日期</td></tr><tr><td align="center">updated</td><td align="center">更新日期</td><td align="center">文件更新日期</td></tr><tr><td align="center">comments</td><td align="center">开启文章的评论功能</td><td align="center">true</td></tr><tr><td align="center">tags</td><td align="center">标签</td><td align="center"></td></tr><tr><td align="center">cate</td><td align="center">分类</td><td align="center"></td></tr><tr><td align="center">permalink</td><td align="center">覆盖文章网址</td><td align="center"></td></tr></tbody></table><p>3.1添加分类</p><p>参数“categories”表示分类，一篇文章只能属于一个分类，如果添加了多个分类，则下一个分类为子分类。<br>添加分类的格式如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 分类</span><br><span class="line">- 子分类</span><br><span class="line">- 子子分类</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -博客 -hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2023/03/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/03/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>…</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2>]]></content>
      
      
      <categories>
          
          <category> 主题优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/15/hello-world/"/>
      <url>/2023/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
